ﬂ
gC:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\ILogDestination.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
public 

	interface 
ILogDestination $
{ 
void## 
WriteMessage## 
(## 
LogEntry## "
entry### (
)##( )
;##) *
}$$ 
}%% ö
oC:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str ,
), -
]- .
[ 
assembly 	
:	 

AssemblyDescription 
( 
$str Q
)Q R
]R S
[ 
assembly 	
:	 
!
AssemblyConfiguration  
(  !
$str! #
)# $
]$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str +
)+ ,
], -
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str .
). /
]/ 0
[   
assembly   	
:  	 

AssemblyCopyright   
(   
$str   D
)  D E
]  E F
[!! 
assembly!! 	
:!!	 

AssemblyTrademark!! 
(!! 
$str!! 
)!!  
]!!  !
["" 
assembly"" 	
:""	 

AssemblyCulture"" 
("" 
$str"" 
)"" 
]"" 
['' 
assembly'' 	
:''	 


ComVisible'' 
('' 
false'' 
)'' 
]'' 
[** 
assembly** 	
:**	 

Guid** 
(** 
$str** 6
)**6 7
]**7 8
[55 
assembly55 	
:55	 

AssemblyVersion55 
(55 
$str55 $
)55$ %
]55% &
[66 
assembly66 	
:66	 

AssemblyFileVersion66 
(66 
$str66 (
)66( )
]66) *ï
lC:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\StreamLogDestination.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
public 

class  
StreamLogDestination %
:& '
ILogDestination( 7
,7 8
IDisposable9 D
{ 
private"" 
System"" 
."" 
IO"" 
."" 
StreamWriter"" &
m_stream""' /
;""/ 0
public((  
StreamLogDestination(( #
(((# $
System(($ *
.((* +
IO((+ -
.((- .
Stream((. 4
stream((5 ;
)((; <
{)) 	
m_stream** 
=** 
new** 
System** !
.**! "
IO**" $
.**$ %
StreamWriter**% 1
(**1 2
stream**2 8
)**8 9
;**9 :
m_stream++ 
.++ 
	AutoFlush++ 
=++  
true++! %
;++% &
},, 	
public22  
StreamLogDestination22 #
(22# $
string22$ *
filename22+ 3
)223 4
:33 
this33 
(33 
new33 
System33 
.33 
IO33  
.33  !

FileStream33! +
(33+ ,
filename33, 4
,334 5
System336 <
.33< =
IO33= ?
.33? @
FileMode33@ H
.33H I
Append33I O
,33O P
System33Q W
.33W X
IO33X Z
.33Z [

FileAccess33[ e
.33e f
Write33f k
)33k l
)33l m
{44 	
}55 	
public== 
virtual== 
void== 
WriteMessage== (
(==( )
LogEntry==) 1
entry==2 7
)==7 8
{>> 	
m_streamGG 
.GG 
	WriteLineGG 
(GG 
entryGG $
.GG$ %
AsStringGG% -
(GG- .
trueGG. 2
)GG2 3
)GG3 4
;GG4 5
}HH 	
publicQQ 
voidQQ 
DisposeQQ 
(QQ 
)QQ 
{RR 	
trySS 
{SS 
ifSS 
(SS 
m_streamSS 
!=SS !
nullSS" &
)SS& '
m_streamSS( 0
.SS0 1
FlushSS1 6
(SS6 7
)SS7 8
;SS8 9
}SS: ;
catchTT 
{TT 
}TT 
tryUU 
{UU 
ifUU 
(UU 
m_streamUU 
!=UU !
nullUU" &
)UU& '
m_streamUU( 0
.UU0 1
CloseUU1 6
(UU6 7
)UU7 8
;UU8 9
}UU: ;
catchVV 
{VV 
}VV 
m_streamXX 
=XX 
nullXX 
;XX 
}YY 	
}\\ 
}]] ı
]C:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\Timer.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
public 

class 
Timer 
: 
IDisposable $
{ 
private   
static   
readonly   
string    &
LOGTAG  ' -
=  . /
$str  0 7
;  7 8
private"" 
readonly"" 
DateTime"" !
m_begin""" )
;"") *
private## 
string## 
m_operation## "
;##" #
private$$ 
readonly$$ 
string$$ 
m_logtag$$  (
;$$( )
private%% 
readonly%% 
string%% 
m_logid%%  '
;%%' (
public-- 
Timer-- 
(-- 
string-- 
logtag-- "
,--" #
string--$ *
logid--+ 0
,--0 1
string--2 8
	operation--9 B
)--B C
{.. 	
m_operation// 
=// 
	operation// #
;//# $
m_begin00 
=00 
DateTime00 
.00 
Now00 "
;00" #
m_logtag11 
=11 
logtag11 
;11 
m_logid22 
=22 
logid22 
;22 
Log33 
.33 !
WriteProfilingMessage33 %
(33% &
LOGTAG33& ,
+33- .
$str33/ 8
+339 :
m_logtag33; C
,33C D
m_logid33E L
,33L M
$str33N ^
,33^ _
m_operation33` k
)33k l
;33l m
}44 	
public;; 
void;; 
Dispose;; 
(;; 
);; 
{<< 	
if== 
(== 
m_operation== 
==== 
null== #
)==# $
return>> 
;>> 
Log@@ 
.@@ !
WriteProfilingMessage@@ %
(@@% &
LOGTAG@@& ,
+@@- .
$str@@/ ;
+@@< =
m_logtag@@> F
,@@F G
m_logid@@H O
,@@O P
$str@@Q v
,@@v w
m_operation	@@x É
,
@@É Ñ
DateTime
@@Ö ç
.
@@ç é
Now
@@é ë
-
@@í ì
m_begin
@@î õ
)
@@õ ú
;
@@ú ù
m_operationAA 
=AA 
nullAA 
;AA 
}BB 	
}EE 
}FF ˆ
`C:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\LogScope.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
internal 
class 
LogScope 
: 
IDisposable )
{ 
public 
readonly 
string 

InstanceID )
=* +
Guid, 0
.0 1
NewGuid1 8
(8 9
)9 :
.: ;
ToString; C
(C D
)D E
;E F
private## 
readonly## 
ILogDestination## (
m_log##) .
;##. /
private(( 
readonly(( 

ILogFilter(( #
m_filter(($ ,
;((, -
public-- 
readonly-- 
LogScope--  
Parent--! '
;--' (
private22 
bool22 
m_isDisposed22 !
=22" #
false22$ )
;22) *
public77 
readonly77 
bool77 
IsolatingScope77 +
;77+ ,
public@@ 
LogScope@@ 
(@@ 
ILogDestination@@ '
self@@( ,
,@@, -

ILogFilter@@. 8
filter@@9 ?
,@@? @
LogScope@@A I
parent@@J P
,@@P Q
bool@@R V
isolatingScope@@W e
)@@e f
{AA 	
ParentBB 
=BB 
parentBB 
;BB 
m_logDD 
=DD 
selfDD 
;DD 
m_filterEE 
=EE 
filterEE 
;EE 
IsolatingScopeFF 
=FF 
isolatingScopeFF +
;FF+ ,
ifHH 
(HH 
parentHH 
!=HH 
nullHH 
)HH 
LoggingII 
.II 
LogII 
.II 

StartScopeII &
(II& '
thisII' +
)II+ ,
;II, -
}JJ 	
publicPP 
voidPP 
WriteMessagePP  
(PP  !
LogEntryPP! )
entryPP* /
)PP/ 0
{QQ 	
ifRR 
(RR 
m_logRR 
!=RR 
nullRR 
&&RR  
(RR! "
m_filterRR" *
==RR+ -
nullRR. 2
||RR3 5
m_filterRR6 >
.RR> ?
AcceptsRR? F
(RRF G
entryRRG L
)RRL M
)RRM N
)RRN O
m_logSS 
.SS 
WriteMessageSS "
(SS" #
entrySS# (
)SS( )
;SS) *
}TT 	
public__ 
void__ 
Dispose__ 
(__ 
)__ 
{`` 	
ifaa 
(aa 
!aa 
m_isDisposedaa 
&&aa  
Parentaa! '
!=aa( *
nullaa+ /
)aa/ 0
{bb 
Loggingcc 
.cc 
Logcc 
.cc 

CloseScopecc &
(cc& '
thiscc' +
)cc+ ,
;cc, -
m_isDisposeddd 
=dd 
truedd #
;dd# $
}ee 
}ff 	
}gg 
}hh œ‘
[C:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\Log.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
public 

enum 
LogMessageType 
{ 
ExplicitOnly"" 
,"" 
	Profiling&& 
,&& 
Verbose** 
,** 
Retry.. 
,.. 
Information22 
,22 
DryRun66 
,66 
Warning:: 
,:: 
Error>> 
,>> 
}?? 
publicDD 

staticDD 
classDD 
LogDD 
{EE 
privateII 
constII 
stringII 
LOGICAL_CONTEXT_KEYII 0
=II1 2
$strII3 K
;IIK L
privateNN 
staticNN 
readonlyNN 
LogScopeNN  (
m_rootNN) /
=NN0 1
newNN2 5
LogScopeNN6 >
(NN> ?
nullNN? C
,NNC D
newNNE H
LogTagFilterNNI U
(NNU V
LogMessageTypeNNV d
.NNd e
ErrorNNe j
,NNj k
nullNNl p
,NNp q
nullNNr v
)NNv w
,NNw x
nullNNy }
,NN} ~
true	NN É
)
NNÉ Ñ
;
NNÑ Ö
privateSS 
staticSS 
readonlySS 

DictionarySS  *
<SS* +
stringSS+ 1
,SS1 2
LogScopeSS3 ;
>SS; <
m_log_instancesSS= L
=SSM N
newSSO R

DictionarySSS ]
<SS] ^
stringSS^ d
,SSd e
LogScopeSSf n
>SSn o
(SSo p
)SSp q
;SSq r
privateXX 
staticXX 
readonlyXX 
objectXX  &
m_lockXX' -
=XX. /
newXX0 3
objectXX4 :
(XX: ;
)XX; <
;XX< =
public]] 
static]] 
object]] 
Lock]] !
{]]" #
get]]$ '
{]]( )
return]]* 0
m_lock]]1 7
;]]7 8
}]]9 :
}]]; <
publicdd 
staticdd 
stringdd 
LogTagFromTypedd +
<dd+ ,
Tdd, -
>dd- .
(dd. /
)dd/ 0
{ee 	
returnff 
LogTagFromTypeff !
(ff! "
typeofff" (
(ff( )
Tff) *
)ff* +
)ff+ ,
;ff, -
}gg 	
publicoo 
staticoo 
stringoo 
LogTagFromTypeoo +
(oo+ ,
Typeoo, 0
too1 2
)oo2 3
{pp 	
returnqq 
tqq 
.qq 
	Namespaceqq 
+qq  
$strqq! $
+qq% &
tqq' (
.qq( )
Nameqq) -
;qq- .
}rr 	
privateyy 
staticyy 
Listyy 
<yy 
stringyy "
>yy" # 
GetBasicHelpUrlItemsyy$ 8
(yy8 9
boolyy9 =
fromCommandLineyy> M
)yyM N
{zz 	
var{{ 
items{{ 
={{ 
new{{ 
List{{  
<{{  !
string{{! '
>{{' (
({{( )
){{) *
;{{* +
items|| 
.|| 
Add|| 
(|| 
$str||  
+||! "
System||# )
.||) *
Uri||* -
.||- .
EscapeDataString||. >
(||> ?
typeof||? E
(||E F
Log||F I
)||I J
.||J K
Assembly||K S
.||S T
GetName||T [
(||[ \
)||\ ]
.||] ^
Version||^ e
.||e f
ToString||f n
(||n o
)||o p
)||p q
)||q r
;||r s
items}} 
.}} 
Add}} 
(}} 
$str}} 
+}} 
(}}  
fromCommandLine}}  /
?}}0 1
$str}}2 5
:}}6 7
$str}}8 ;
)}}; <
)}}< =
;}}= >
return
ÄÄ 
items
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
private
àà 
static
àà 
string
àà 
EncodeHelpUrl
àà +
(
àà+ ,
IEnumerable
àà, 7
<
àà7 8
string
àà8 >
>
àà> ?
items
àà@ E
)
ààE F
{
ââ 	
var
ää 
query
ää 
=
ää 
string
ää 
.
ää 
Join
ää #
(
ää# $
$str
ää$ '
,
ää' (
items
ää) .
)
ää. /
;
ää/ 0
if
ãã 
(
ãã 
!
ãã 
string
ãã 
.
ãã  
IsNullOrWhiteSpace
ãã *
(
ãã* +
query
ãã+ 0
)
ãã0 1
)
ãã1 2
query
åå 
=
åå 
$str
åå 
+
åå 
query
åå #
;
åå# $
return
éé 
$str
éé 0
+
éé1 2
query
éé3 8
;
éé8 9
}
èè 	
public
óó 
static
óó 
string
óó 
CreateHelpLink
óó +
(
óó+ ,
string
óó, 2
id
óó3 5
,
óó5 6
bool
óó7 ;
fromCommandLine
óó< K
)
óóK L
{
òò 	
var
ôô 
items
ôô 
=
ôô "
GetBasicHelpUrlItems
ôô ,
(
ôô, -
fromCommandLine
ôô- <
)
ôô< =
;
ôô= >
if
öö 
(
öö 
!
öö 
string
öö 
.
öö  
IsNullOrWhiteSpace
öö *
(
öö* +
id
öö+ -
)
öö- .
)
öö. /
items
õõ 
.
õõ 
Add
õõ 
(
õõ 
$str
õõ 
+
õõ  !
System
õõ" (
.
õõ( )
Uri
õõ) ,
.
õõ, -
EscapeDataString
õõ- =
(
õõ= >
id
õõ> @
)
õõ@ A
)
õõA B
;
õõB C
return
úú 
EncodeHelpUrl
úú  
(
úú  !
items
úú! &
)
úú& '
;
úú' (
}
ùù 	
public
ßß 
static
ßß 
string
ßß 
CreateHelpLink
ßß +
(
ßß+ ,
string
ßß, 2
tag
ßß3 6
,
ßß6 7
string
ßß8 >
	messageid
ßß? H
,
ßßH I
string
ßßJ P
exceptionid
ßßQ \
,
ßß\ ]
bool
ßß^ b
fromCommandLine
ßßc r
)
ßßr s
{
®® 	
var
©© 
items
©© 
=
©© "
GetBasicHelpUrlItems
©© ,
(
©©, -
fromCommandLine
©©- <
)
©©< =
;
©©= >
if
™™ 
(
™™ 
!
™™ 
string
™™ 
.
™™  
IsNullOrWhiteSpace
™™ *
(
™™* +
tag
™™+ .
)
™™. /
)
™™/ 0
items
´´ 
.
´´ 
Add
´´ 
(
´´ 
$str
´´  
+
´´! "
System
´´# )
.
´´) *
Uri
´´* -
.
´´- .
EscapeDataString
´´. >
(
´´> ?
tag
´´? B
)
´´B C
)
´´C D
;
´´D E
if
¨¨ 
(
¨¨ 
!
¨¨ 
string
¨¨ 
.
¨¨  
IsNullOrWhiteSpace
¨¨ *
(
¨¨* +
	messageid
¨¨+ 4
)
¨¨4 5
)
¨¨5 6
items
≠≠ 
.
≠≠ 
Add
≠≠ 
(
≠≠ 
$str
≠≠ "
+
≠≠# $
System
≠≠% +
.
≠≠+ ,
Uri
≠≠, /
.
≠≠/ 0
EscapeDataString
≠≠0 @
(
≠≠@ A
	messageid
≠≠A J
)
≠≠J K
)
≠≠K L
;
≠≠L M
if
ÆÆ 
(
ÆÆ 
!
ÆÆ 
string
ÆÆ 
.
ÆÆ  
IsNullOrWhiteSpace
ÆÆ *
(
ÆÆ* +
exceptionid
ÆÆ+ 6
)
ÆÆ6 7
)
ÆÆ7 8
items
ØØ 
.
ØØ 
Add
ØØ 
(
ØØ 
$str
ØØ !
+
ØØ" #
System
ØØ$ *
.
ØØ* +
Uri
ØØ+ .
.
ØØ. /
EscapeDataString
ØØ/ ?
(
ØØ? @
exceptionid
ØØ@ K
)
ØØK L
)
ØØL M
;
ØØM N
return
±± 
EncodeHelpUrl
±±  
(
±±  !
items
±±! &
)
±±& '
;
±±' (
}
≤≤ 	
public
ªª 
static
ªª 
void
ªª "
WriteExplicitMessage
ªª /
(
ªª/ 0
string
ªª0 6
tag
ªª7 :
,
ªª: ;
string
ªª< B
id
ªªC E
,
ªªE F
string
ªªG M
message
ªªN U
,
ªªU V
params
ªªW ]
object
ªª^ d
[
ªªd e
]
ªªe f
	arguments
ªªg p
)
ªªp q
{
ºº 	
WriteMessage
ΩΩ 
(
ΩΩ 
LogMessageType
ΩΩ '
.
ΩΩ' (
ExplicitOnly
ΩΩ( 4
,
ΩΩ4 5
tag
ΩΩ6 9
,
ΩΩ9 :
id
ΩΩ; =
,
ΩΩ= >
null
ΩΩ? C
,
ΩΩC D
message
ΩΩE L
,
ΩΩL M
	arguments
ΩΩN W
)
ΩΩW X
;
ΩΩX Y
}
ææ 	
public
»» 
static
»» 
void
»» "
WriteExplicitMessage
»» /
(
»»/ 0
string
»»0 6
tag
»»7 :
,
»»: ;
string
»»< B
id
»»C E
,
»»E F
	Exception
»»G P
ex
»»Q S
,
»»S T
string
»»U [
message
»»\ c
,
»»c d
params
»»e k
object
»»l r
[
»»r s
]
»»s t
	arguments
»»u ~
)
»»~ 
{
…… 	
WriteMessage
   
(
   
LogMessageType
   '
.
  ' (
ExplicitOnly
  ( 4
,
  4 5
tag
  6 9
,
  9 :
id
  ; =
,
  = >
ex
  ? A
,
  A B
message
  C J
,
  J K
	arguments
  L U
)
  U V
;
  V W
}
ÀÀ 	
public
‘‘ 
static
‘‘ 
void
‘‘ !
WriteVerboseMessage
‘‘ .
(
‘‘. /
string
‘‘/ 5
tag
‘‘6 9
,
‘‘9 :
string
‘‘; A
id
‘‘B D
,
‘‘D E
string
‘‘F L
message
‘‘M T
,
‘‘T U
params
‘‘V \
object
‘‘] c
[
‘‘c d
]
‘‘d e
	arguments
‘‘f o
)
‘‘o p
{
’’ 	
WriteMessage
÷÷ 
(
÷÷ 
LogMessageType
÷÷ '
.
÷÷' (
Verbose
÷÷( /
,
÷÷/ 0
tag
÷÷1 4
,
÷÷4 5
id
÷÷6 8
,
÷÷8 9
null
÷÷: >
,
÷÷> ?
message
÷÷@ G
,
÷÷G H
	arguments
÷÷I R
)
÷÷R S
;
÷÷S T
}
◊◊ 	
public
·· 
static
··	 
void
·· !
WriteVerboseMessage
·· (
(
··( )
string
··) /
tag
··0 3
,
··3 4
string
··5 ;
id
··< >
,
··> ?
	Exception
··@ I
ex
··J L
,
··L M
string
··N T
message
··U \
,
··\ ]
params
··^ d
object
··e k
[
··k l
]
··l m
	arguments
··n w
)
··w x
{
‚‚ 	
WriteMessage
„„ 
(
„„ 
LogMessageType
„„ '
.
„„' (
Verbose
„„( /
,
„„/ 0
tag
„„1 4
,
„„4 5
id
„„6 8
,
„„8 9
ex
„„: <
,
„„< =
message
„„> E
,
„„E F
	arguments
„„G P
)
„„P Q
;
„„Q R
}
‰‰ 	
public
ÌÌ 
static
ÌÌ 
void
ÌÌ #
WriteProfilingMessage
ÌÌ 0
(
ÌÌ0 1
string
ÌÌ1 7
tag
ÌÌ8 ;
,
ÌÌ; <
string
ÌÌ= C
id
ÌÌD F
,
ÌÌF G
string
ÌÌH N
message
ÌÌO V
,
ÌÌV W
params
ÌÌX ^
object
ÌÌ_ e
[
ÌÌe f
]
ÌÌf g
	arguments
ÌÌh q
)
ÌÌq r
{
ÓÓ 	
WriteMessage
ÔÔ 
(
ÔÔ 
LogMessageType
ÔÔ '
.
ÔÔ' (
	Profiling
ÔÔ( 1
,
ÔÔ1 2
tag
ÔÔ3 6
,
ÔÔ6 7
id
ÔÔ8 :
,
ÔÔ: ;
null
ÔÔ< @
,
ÔÔ@ A
message
ÔÔB I
,
ÔÔI J
	arguments
ÔÔK T
)
ÔÔT U
;
ÔÔU V
}
 	
public
˘˘ 
static
˘˘ 
void
˘˘  
WriteDryrunMessage
˘˘ -
(
˘˘- .
string
˘˘. 4
tag
˘˘5 8
,
˘˘8 9
string
˘˘: @
id
˘˘A C
,
˘˘C D
string
˘˘E K
message
˘˘L S
,
˘˘S T
params
˘˘U [
object
˘˘\ b
[
˘˘b c
]
˘˘c d
	arguments
˘˘e n
)
˘˘n o
{
˙˙ 	
WriteMessage
˚˚ 
(
˚˚ 
LogMessageType
˚˚ '
.
˚˚' (
DryRun
˚˚( .
,
˚˚. /
tag
˚˚0 3
,
˚˚3 4
id
˚˚5 7
,
˚˚7 8
null
˚˚9 =
,
˚˚= >
message
˚˚? F
,
˚˚F G
	arguments
˚˚H Q
)
˚˚Q R
;
˚˚R S
}
¸¸ 	
public
ÜÜ 
static
ÜÜ 
void
ÜÜ 
WriteRetryMessage
ÜÜ ,
(
ÜÜ, -
string
ÜÜ- 3
tag
ÜÜ4 7
,
ÜÜ7 8
string
ÜÜ9 ?
id
ÜÜ@ B
,
ÜÜB C
	Exception
ÜÜD M
ex
ÜÜN P
,
ÜÜP Q
string
ÜÜR X
message
ÜÜY `
,
ÜÜ` a
params
ÜÜb h
object
ÜÜi o
[
ÜÜo p
]
ÜÜp q
	arguments
ÜÜr {
)
ÜÜ{ |
{
áá 	
WriteMessage
àà 
(
àà 
LogMessageType
àà '
.
àà' (
Retry
àà( -
,
àà- .
tag
àà/ 2
,
àà2 3
id
àà4 6
,
àà6 7
ex
àà8 :
,
àà: ;
message
àà< C
,
ààC D
	arguments
ààE N
)
ààN O
;
ààO P
}
ââ 	
public
íí 
static
íí 
void
íí %
WriteInformationMessage
íí 2
(
íí2 3
string
íí3 9
tag
íí: =
,
íí= >
string
íí? E
id
ííF H
,
ííH I
string
ííJ P
message
ííQ X
,
ííX Y
params
ííZ `
object
íía g
[
ííg h
]
ííh i
	arguments
ííj s
)
íís t
{
ìì 	
WriteMessage
îî 
(
îî 
LogMessageType
îî '
.
îî' (
Information
îî( 3
,
îî3 4
tag
îî5 8
,
îî8 9
id
îî: <
,
îî< =
null
îî> B
,
îîB C
message
îîD K
,
îîK L
	arguments
îîM V
)
îîV W
;
îîW X
}
ïï 	
public
üü 
static
üü 
void
üü !
WriteWarningMessage
üü .
(
üü. /
string
üü/ 5
tag
üü6 9
,
üü9 :
string
üü; A
id
üüB D
,
üüD E
	Exception
üüF O
ex
üüP R
,
üüR S
string
üüT Z
message
üü[ b
,
üüb c
params
üüd j
object
üük q
[
üüq r
]
üür s
	arguments
üüt }
)
üü} ~
{
†† 	
WriteMessage
°° 
(
°° 
LogMessageType
°° '
.
°°' (
Warning
°°( /
,
°°/ 0
tag
°°1 4
,
°°4 5
id
°°6 8
,
°°8 9
ex
°°: <
,
°°< =
message
°°> E
,
°°E F
	arguments
°°G P
)
°°P Q
;
°°Q R
}
¢¢ 	
public
¨¨ 
static
¨¨ 
void
¨¨ 
WriteErrorMessage
¨¨ ,
(
¨¨, -
string
¨¨- 3
tag
¨¨4 7
,
¨¨7 8
string
¨¨9 ?
id
¨¨@ B
,
¨¨B C
	Exception
¨¨D M
ex
¨¨N P
,
¨¨P Q
string
¨¨R X
message
¨¨Y `
,
¨¨` a
params
¨¨b h
object
¨¨i o
[
¨¨o p
]
¨¨p q
	arguments
¨¨r {
)
¨¨{ |
{
≠≠ 	
WriteMessage
ÆÆ 
(
ÆÆ 
LogMessageType
ÆÆ '
.
ÆÆ' (
Error
ÆÆ( -
,
ÆÆ- .
tag
ÆÆ/ 2
,
ÆÆ2 3
id
ÆÆ4 6
,
ÆÆ6 7
ex
ÆÆ8 :
,
ÆÆ: ;
message
ÆÆ< C
,
ÆÆC D
	arguments
ÆÆE N
)
ÆÆN O
;
ÆÆO P
}
ØØ 	
public
∏∏ 
static
∏∏ 
void
∏∏ 
WriteMessage
∏∏ '
(
∏∏' (
LogMessageType
∏∏( 6
type
∏∏7 ;
,
∏∏; <
string
∏∏= C
tag
∏∏D G
,
∏∏G H
string
∏∏I O
id
∏∏P R
,
∏∏R S
string
∏∏T Z
message
∏∏[ b
,
∏∏b c
params
∏∏d j
object
∏∏k q
[
∏∏q r
]
∏∏r s
	arguments
∏∏t }
)
∏∏} ~
{
ππ 	
WriteMessage
∫∫ 
(
∫∫ 
type
∫∫ 
,
∫∫ 
tag
∫∫ "
,
∫∫" #
id
∫∫$ &
,
∫∫& '
null
∫∫( ,
,
∫∫, -
message
∫∫. 5
,
∫∫5 6
	arguments
∫∫7 @
)
∫∫@ A
;
∫∫A B
}
ªª 	
public
∆∆ 
static
∆∆ 
void
∆∆ 
WriteMessage
∆∆ '
(
∆∆' (
LogMessageType
∆∆( 6
type
∆∆7 ;
,
∆∆; <
string
∆∆= C
tag
∆∆D G
,
∆∆G H
string
∆∆I O
id
∆∆P R
,
∆∆R S
	Exception
∆∆T ]
ex
∆∆^ `
,
∆∆` a
string
∆∆b h
message
∆∆i p
,
∆∆p q
params
∆∆r x
object
∆∆y 
[∆∆ Ä
]∆∆Ä Å
	arguments∆∆Ç ã
)∆∆ã å
{
«« 	
var
»» 
msg
»» 
=
»» 
new
»» 
LogEntry
»» "
(
»»" #
message
»»# *
,
»»* +
	arguments
»», 5
,
»»5 6
type
»»7 ;
,
»»; <
tag
»»= @
,
»»@ A
id
»»B D
,
»»D E
ex
»»F H
)
»»H I
;
»»I J
lock
   
(
   
m_lock
   
)
   
{
ÀÀ 
var
ÃÃ 
cs
ÃÃ 
=
ÃÃ 
CurrentScope
ÃÃ %
;
ÃÃ% &
while
ÕÕ 
(
ÕÕ 
cs
ÕÕ 
!=
ÕÕ 
null
ÕÕ !
&&
ÕÕ" $
!
ÕÕ% &
cs
ÕÕ& (
.
ÕÕ( )
IsolatingScope
ÕÕ) 7
)
ÕÕ7 8
{
ŒŒ 
cs
œœ 
.
œœ 
WriteMessage
œœ #
(
œœ# $
msg
œœ$ '
)
œœ' (
;
œœ( )
cs
–– 
=
–– 
cs
–– 
.
–– 
Parent
–– "
;
––" #
}
—— 
}
““ 
}
”” 	
public
⁄⁄ 
static
⁄⁄ 
IDisposable
⁄⁄ !!
StartIsolatingScope
⁄⁄" 5
(
⁄⁄5 6
bool
⁄⁄6 :
detached
⁄⁄; C
)
⁄⁄C D
{
€€ 	
lock
‹‹ 
(
‹‹ 
m_lock
‹‹ 
)
‹‹ 
{
›› 
var
ﬁﬁ 
scope
ﬁﬁ 
=
ﬁﬁ 

StartScope
ﬁﬁ &
(
ﬁﬁ& '
null
ﬁﬁ' +
,
ﬁﬁ+ ,
null
ﬁﬁ- 1
,
ﬁﬁ1 2
true
ﬁﬁ3 7
)
ﬁﬁ7 8
;
ﬁﬁ8 9
if
ﬂﬂ 
(
ﬂﬂ 
detached
ﬂﬂ 
)
ﬂﬂ  
DetachCurrentScope
‡‡ &
(
‡‡& '
scope
‡‡' ,
)
‡‡, -
;
‡‡- .
return
·· 
scope
·· 
;
·· 
}
‚‚ 
}
„„ 	
public
ÈÈ 
static
ÈÈ 
IDisposable
ÈÈ ! 
DetachCurrentScope
ÈÈ" 4
(
ÈÈ4 5
IDisposable
ÈÈ5 @
scope
ÈÈA F
)
ÈÈF G
{
ÍÍ 	
lock
ÎÎ 
(
ÎÎ 
m_lock
ÎÎ 
)
ÎÎ 
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
CurrentScope
ÌÌ  
==
ÌÌ! #
scope
ÌÌ$ )
&&
ÌÌ* ,
scope
ÌÌ- 2
!=
ÌÌ3 5
null
ÌÌ6 :
&&
ÌÌ; =
CurrentScope
ÌÌ> J
.
ÌÌJ K
Parent
ÌÌK Q
!=
ÌÌR T
null
ÌÌU Y
)
ÌÌY Z
CurrentScope
ÓÓ  
=
ÓÓ! "
CurrentScope
ÓÓ# /
.
ÓÓ/ 0
Parent
ÓÓ0 6
;
ÓÓ6 7
}
ÔÔ 
return
ÒÒ 
scope
ÒÒ 
;
ÒÒ 
}
ÚÚ 	
public
¯¯ 
static
¯¯ 
IDisposable
¯¯ !

StartScope
¯¯" ,
(
¯¯, -
)
¯¯- .
{
˘˘ 	
return
˙˙ 

StartScope
˙˙ 
(
˙˙ 
(
˙˙ 
ILogDestination
˙˙ .
)
˙˙. /
null
˙˙/ 3
,
˙˙3 4
null
˙˙5 9
)
˙˙9 :
;
˙˙: ;
}
˚˚ 	
public
ÉÉ 
static
ÉÉ 
IDisposable
ÉÉ !

StartScope
ÉÉ" ,
(
ÉÉ, -
ILogDestination
ÉÉ- <
log
ÉÉ= @
,
ÉÉ@ A
LogMessageType
ÉÉB P
level
ÉÉQ V
)
ÉÉV W
{
ÑÑ 	
return
ÖÖ 

StartScope
ÖÖ 
(
ÖÖ 
log
ÖÖ !
,
ÖÖ! "
new
ÖÖ# &
LogTagFilter
ÖÖ' 3
(
ÖÖ3 4
level
ÖÖ4 9
,
ÖÖ9 :
null
ÖÖ; ?
,
ÖÖ? @
null
ÖÖA E
)
ÖÖE F
)
ÖÖF G
;
ÖÖG H
}
ÜÜ 	
public
éé 
static
éé 
IDisposable
éé !

StartScope
éé" ,
(
éé, -
ILogDestination
éé- <
log
éé= @
,
éé@ A

ILogFilter
ééB L
filter
ééM S
=
ééT U
null
ééV Z
,
ééZ [
bool
éé\ `
	isolating
ééa j
=
éék l
false
éém r
)
éér s
{
èè 	
return
êê 
new
êê 
LogScope
êê 
(
êê  
log
êê  #
,
êê# $
filter
êê% +
,
êê+ ,
CurrentScope
êê- 9
,
êê9 :
	isolating
êê; D
)
êêD E
;
êêE F
}
ëë 	
public
ôô 
static
ôô 
IDisposable
ôô !

StartScope
ôô" ,
(
ôô, -
Action
ôô- 3
<
ôô3 4
LogEntry
ôô4 <
>
ôô< =
log
ôô> A
,
ôôA B
Func
ôôC G
<
ôôG H
LogEntry
ôôH P
,
ôôP Q
bool
ôôR V
>
ôôV W
filter
ôôX ^
=
ôô_ `
null
ôôa e
)
ôôe f
{
öö 	
return
õõ 
new
õõ 
LogScope
õõ 
(
õõ  
new
õõ  #$
FunctionLogDestination
õõ$ :
(
õõ: ;
log
õõ; >
)
õõ> ?
,
õõ? @
filter
õõA G
==
õõH J
null
õõK O
?
õõP Q
null
õõR V
:
õõW X
new
õõY \
FunctionFilter
õõ] k
(
õõk l
filter
õõl r
)
õõr s
,
õõs t
CurrentScopeõõu Å
,õõÅ Ç
falseõõÉ à
)õõà â
;õõâ ä
}
úú 	
internal
¢¢ 
static
¢¢ 
void
¢¢ 

StartScope
¢¢ '
(
¢¢' (
LogScope
¢¢( 0
scope
¢¢1 6
)
¢¢6 7
{
££ 	
CurrentScope
§§ 
=
§§ 
scope
§§  
;
§§  !
}
•• 	
internal
´´ 
static
´´ 
void
´´ 

CloseScope
´´ '
(
´´' (
LogScope
´´( 0
scope
´´1 6
)
´´6 7
{
¨¨ 	
lock
≠≠ 
(
≠≠ 
m_lock
≠≠ 
)
≠≠ 
{
ÆÆ 
if
ØØ 
(
ØØ 
CurrentScope
ØØ  
==
ØØ! #
scope
ØØ$ )
&&
ØØ* ,
scope
ØØ- 2
!=
ØØ3 5
m_root
ØØ6 <
)
ØØ< =
CurrentScope
∞∞  
=
∞∞! "
scope
∞∞# (
.
∞∞( )
Parent
∞∞) /
;
∞∞/ 0
m_log_instances
±± 
.
±±  
Remove
±±  &
(
±±& '
scope
±±' ,
.
±±, -

InstanceID
±±- 7
)
±±7 8
;
±±8 9
}
≤≤ 
}
≥≥ 	
internal
∏∏ 
static
∏∏ 
LogScope
∏∏  
CurrentScope
∏∏! -
{
ππ 	
get
∫∫ 
{
ªª 
lock
ºº 
(
ºº 
m_lock
ºº 
)
ºº 
{
ΩΩ 
var
ææ 
cur
ææ 
=
ææ 
System
ææ $
.
ææ$ %
Runtime
ææ% ,
.
ææ, -
Remoting
ææ- 5
.
ææ5 6
	Messaging
ææ6 ?
.
ææ? @
CallContext
ææ@ K
.
ææK L
LogicalGetData
ææL Z
(
ææZ [!
LOGICAL_CONTEXT_KEY
ææ[ n
)
ææn o
as
ææp r
string
ææs y
;
ææy z
if
øø 
(
øø 
cur
øø 
==
øø 
null
øø #
||
øø$ &
cur
øø' *
==
øø+ -
m_root
øø. 4
.
øø4 5

InstanceID
øø5 ?
)
øø? @
return
¿¿ 
m_root
¿¿ %
;
¿¿% &
LogScope
¬¬ 
sc
¬¬ 
;
¬¬  
if
√√ 
(
√√ 
!
√√ 
m_log_instances
√√ (
.
√√( )
TryGetValue
√√) 4
(
√√4 5
cur
√√5 8
,
√√8 9
out
√√: =
sc
√√> @
)
√√@ A
)
√√A B
throw
ƒƒ 
new
ƒƒ !
	Exception
ƒƒ" +
(
ƒƒ+ ,
$strƒƒ, ∫
)ƒƒ∫ ª
;ƒƒª º
return
∆∆ 
sc
∆∆ 
;
∆∆ 
}
«« 
}
»» 
private
…… 
set
…… 
{
   
lock
ÀÀ 
(
ÀÀ 
m_lock
ÀÀ 
)
ÀÀ 
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
value
ÕÕ 
!=
ÕÕ  
null
ÕÕ! %
)
ÕÕ% &
{
ŒŒ 
m_log_instances
œœ '
[
œœ' (
value
œœ( -
.
œœ- .

InstanceID
œœ. 8
]
œœ8 9
=
œœ: ;
value
œœ< A
;
œœA B
System
–– 
.
–– 
Runtime
–– &
.
––& '
Remoting
––' /
.
––/ 0
	Messaging
––0 9
.
––9 :
CallContext
––: E
.
––E F
LogicalSetData
––F T
(
––T U!
LOGICAL_CONTEXT_KEY
––U h
,
––h i
value
––j o
.
––o p

InstanceID
––p z
)
––z {
;
––{ |
}
—— 
else
““ 
{
”” 
System
‘‘ 
.
‘‘ 
Runtime
‘‘ &
.
‘‘& '
Remoting
‘‘' /
.
‘‘/ 0
	Messaging
‘‘0 9
.
‘‘9 :
CallContext
‘‘: E
.
‘‘E F
LogicalSetData
‘‘F T
(
‘‘T U!
LOGICAL_CONTEXT_KEY
‘‘U h
,
‘‘h i
null
‘‘j n
)
‘‘n o
;
‘‘o p
}
’’ 
}
÷÷ 
}
◊◊ 
}
ÿÿ 	
}
ŸŸ 
}⁄⁄ –
bC:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\ILogFilter.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
public 

	interface 

ILogFilter 
{ 
bool 
Accepts 
( 
LogEntry 
entry #
)# $
;$ %
} 
}   €
dC:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\LogTagFilter.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
public 

class 
LogTagFilter 
: 

ILogFilter  *
{ 
private 
readonly 
string 
[  
]  !
m_excludeTags" /
;/ 0
private## 
readonly## 
string## 
[##  
]##  !
m_includeTags##" /
;##/ 0
private(( 
readonly(( 
LogMessageType(( '

m_logLevel((( 2
;((2 3
public-- 
LogTagFilter-- 
(-- 
LogMessageType-- *
logLevel--+ 3
,--3 4
string--5 ;
[--; <
]--< =
excludeTags--> I
,--I J
string--K Q
[--Q R
]--R S
includeTags--T _
)--_ `
{.. 	

m_logLevel// 
=// 
logLevel// !
;//! "
m_excludeTags00 
=00 
excludeTags00 '
??00( *
new00+ .
string00/ 5
[005 6
$num006 7
]007 8
;008 9
m_includeTags11 
=11 
includeTags11 '
??11( *
new11+ .
string11/ 5
[115 6
$num116 7
]117 8
;118 9
}22 	
public99 
bool99 
Accepts99 
(99 
LogEntry99 $
entry99% *
)99* +
{:: 	
if<< 
(<< 
m_excludeTags<< 
.<< 
Any<< !
(<<! "
x<<" #
=><<$ &
entry<<' ,
.<<, -
	FilterTag<<- 6
.<<6 7

StartsWith<<7 A
(<<A B
x<<B C
,<<C D
StringComparison<<E U
.<<U V
OrdinalIgnoreCase<<V g
)<<g h
)<<h i
)<<i j
return== 
false== 
;== 
return@@ 
entry@@ 
.@@ 
Level@@ 
>=@@ !

m_logLevel@@" ,
||@@- /
m_includeTags@@0 =
.@@= >
Any@@> A
(@@A B
x@@B C
=>@@D F
entry@@G L
.@@L M
	FilterTag@@M V
.@@V W

StartsWith@@W a
(@@a b
x@@b c
,@@c d
StringComparison@@e u
.@@u v
OrdinalIgnoreCase	@@v á
)
@@á à
)
@@à â
;
@@â ä
}AA 	
}BB 
}CC Ö5
`C:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\LogEntry.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
public 

class 
LogEntry 
{ 
public 
DateTime 
When 
; 
public$$ 
readonly$$ 
string$$ 
Message$$ &
;$$& '
public)) 
readonly)) 
object)) 
[)) 
]))  
	Arguments))! *
;))* +
public.. 
LogMessageType.. 
Level.. #
;..# $
public33 
readonly33 
string33 
	FilterTag33 (
;33( )
public88 
readonly88 
string88 
Tag88 "
;88" #
public== 
readonly== 
string== 
Id== !
;==! "
publicBB 
readonlyBB 
	ExceptionBB !
	ExceptionBB" +
;BB+ ,
privateGG 

DictionaryGG 
<GG 
stringGG !
,GG! "
stringGG# )
>GG) *
m_logContextGG+ 7
;GG7 8
publicMM 
stringMM 
thisMM 
[MM 
stringMM !
keyMM" %
]MM% &
{NN 	
getOO 
{PP 
ifQQ 
(QQ 
m_logContextQQ  
==QQ! #
nullQQ$ (
)QQ( )
returnRR 
nullRR 
;RR  
m_logContextSS 
.SS 
TryGetValueSS (
(SS( )
keySS) ,
,SS, -
outSS. 1
varSS2 5
sSS6 7
)SS7 8
;SS8 9
returnTT 
sTT 
;TT 
}UU 
setWW 
{XX 
ifYY 
(YY 
m_logContextYY  
==YY! #
nullYY$ (
)YY( )
m_logContextZZ  
=ZZ! "
newZZ# &

DictionaryZZ' 1
<ZZ1 2
stringZZ2 8
,ZZ8 9
stringZZ: @
>ZZ@ A
(ZZA B
)ZZB C
;ZZC D
m_logContext\\ 
[\\ 
key\\  
]\\  !
=\\" #
value\\$ )
;\\) *
}^^ 
}__ 	
publicee 
IEnumerableee 
<ee 
stringee !
>ee! "
ContextKeysee# .
{ff 	
getgg 
{hh 
ifii 
(ii 
m_logContextii  
==ii! #
nullii$ (
)ii( )
returnjj 
newjj 
stringjj %
[jj% &
$numjj& '
]jj' (
;jj( )
returnll 
m_logContextll #
.ll# $
Keysll$ (
;ll( )
}mm 
}nn 	
publictt 
stringtt 
FormattedMessagett &
{uu 	
getvv 
{ww 
ifxx 
(xx 
	Argumentsxx 
==xx  
nullxx! %
||xx& (
	Argumentsxx) 2
.xx2 3
Lengthxx3 9
==xx: <
$numxx= >
)xx> ?
returnyy 
Messageyy "
;yy" #
try{{ 
{|| 
return}} 
string}} !
.}}! "
Format}}" (
(}}( )
Message}}) 0
,}}0 1
	Arguments}}2 ;
)}}; <
;}}< =
}~~ 
catch 
{
ÄÄ 
return
ÇÇ 
string
ÇÇ !
.
ÇÇ! "
Format
ÇÇ" (
(
ÇÇ( )
$str
ÇÇ) _
,
ÇÇ_ `
Message
ÇÇa h
,
ÇÇh i
string
ÇÇj p
.
ÇÇp q
Join
ÇÇq u
(
ÇÇu v
$str
ÇÇv z
,
ÇÇz {
	ArgumentsÇÇ| Ö
.ÇÇÖ Ü
SelectÇÇÜ å
(ÇÇå ç
xÇÇç é
=>ÇÇè ë
xÇÇí ì
==ÇÇî ñ
nullÇÇó õ
?ÇÇú ù
$strÇÇû ¶
:ÇÇß ®
xÇÇ© ™
.ÇÇ™ ´
ToStringÇÇ´ ≥
(ÇÇ≥ ¥
)ÇÇ¥ µ
)ÇÇµ ∂
)ÇÇ∂ ∑
)ÇÇ∑ ∏
;ÇÇ∏ π
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
public
íí 
LogEntry
íí 
(
íí 
string
íí 
message
íí &
,
íí& '
object
íí( .
[
íí. /
]
íí/ 0
	arguments
íí1 :
,
íí: ;
LogMessageType
íí< J
level
ííK P
,
ííP Q
string
ííR X
tag
ííY \
,
íí\ ]
string
íí^ d
id
ííe g
,
ííg h
	Exception
ííi r
	exception
íís |
)
íí| }
{
ìì 	
When
îî 
=
îî 
DateTime
îî 
.
îî 
Now
îî 
;
îî  
Message
ïï 
=
ïï 
message
ïï 
;
ïï 
	Arguments
ññ 
=
ññ 
	arguments
ññ !
;
ññ! "
Level
óó 
=
óó 
level
óó 
;
óó 
Tag
òò 
=
òò 
tag
òò 
;
òò 
Id
ôô 
=
ôô 
id
ôô 
;
ôô 
	Exception
öö 
=
öö 
	exception
öö !
;
öö! "
	FilterTag
õõ 
=
õõ 
level
õõ 
+
õõ 
$str
õõ  #
+
õõ$ %
tag
õõ& )
+
õõ* +
$str
õõ, /
+
õõ0 1
id
õõ2 4
;
õõ4 5
}
úú 	
public
¢¢ 
override
¢¢ 
string
¢¢ 
ToString
¢¢ '
(
¢¢' (
)
¢¢( )
{
££ 	
return
§§ 
string
§§ 
.
§§ 
Format
§§  
(
§§  !
$str
§§! J
,
§§J K
When
§§L P
.
§§P Q
ToLocalTime
§§Q \
(
§§\ ]
)
§§] ^
,
§§^ _
	FilterTag
§§` i
,
§§i j
FormattedMessage
§§k {
)
§§{ |
;
§§| }
}
•• 	
public
¨¨ 
string
¨¨ 
AsString
¨¨ 
(
¨¨ 
bool
¨¨ #"
withExceptionDetails
¨¨$ 8
)
¨¨8 9
{
≠≠ 	
return
ÆÆ 
this
ÆÆ 
+
ÆÆ 
(
ØØ 
(
ØØ "
withExceptionDetails
ØØ -
&&
ØØ. 0
	Exception
ØØ1 :
!=
ØØ; =
null
ØØ> B
)
ØØB C
?
∞∞ 
Environment
∞∞ %
.
∞∞% &
NewLine
∞∞& -
+
∞∞. /
	Exception
∞∞0 9
:
±± 
string
±±  
.
±±  !
Empty
±±! &
)
±±& '
;
±±' (
}
≤≤ 	
}
≥≥ 
}¥¥  
eC:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\LambdaSupport.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
internal 
class "
FunctionLogDestination )
:* +
ILogDestination, ;
{ 
private 
readonly 
Action 
<  
LogEntry  (
>( )
m_entry* 1
;1 2
public"" "
FunctionLogDestination"" %
(""% &
Action""& ,
<"", -
LogEntry""- 5
>""5 6
entry""7 <
)""< =
{## 	
m_entry$$ 
=$$ 
entry$$ 
??$$ 
throw$$ $
new$$% (!
ArgumentNullException$$) >
($$> ?
nameof$$? E
($$E F
entry$$F K
)$$K L
)$$L M
;$$M N
}%% 	
public++ 
void++	 
WriteMessage++ 
(++ 
LogEntry++ #
entry++$ )
)++) *
{,, 	
m_entry-- 
.-- 
Invoke-- 
(-- 
entry--  
)--  !
;--! "
}.. 	
}// 
internal44 
class44 
FunctionFilter44 !
:44" #

ILogFilter44$ .
{55 
private99 
readonly99 
Func99 
<99 
LogEntry99 &
,99& '
bool99( ,
>99, -
	m_handler99. 7
;997 8
public?? 
FunctionFilter?? 
(?? 
Func?? "
<??" #
LogEntry??# +
,??+ ,
bool??- 1
>??1 2
handler??3 :
)??: ;
{@@ 	
	m_handlerAA 
=AA 
handlerAA 
??AA  "
throwAA# (
newAA) ,!
ArgumentNullExceptionAA- B
(AAB C
nameofAAC I
(AAI J
handlerAAJ Q
)AAQ R
)AAR S
;AAS T
}BB 	
publicII 
boolII 
AcceptsII 
(II 
LogEntryII $
entryII% *
)II* +
{JJ 	
returnKK 
	m_handlerKK 
(KK 
entryKK "
)KK" #
;KK# $
}LL 	
}MM 
}NN ö(
iC:\Users\Kevin\Downloads\duplicati-master\duplicati-master\Duplicati\Library\Logging\RepeatingLogScope.cs
	namespace 	
	Duplicati
 
. 
Library 
. 
Logging #
{ 
public 

class 
RepeatingLogScope "
:# $
ILogDestination% 4
,4 5
IDisposable6 A
{ 
private 
const 
string 
STILL_RUNNING *
=+ ,
$str- 3
;3 4
private"" 
readonly"" 
IDisposable"" $
m_scope""% ,
;"", -
private&& 
readonly&& 
long&& 
m_maxIdleTime&& +
=&&, -
TimeSpan&&. 6
.&&6 7
FromSeconds&&7 B
(&&B C
$num&&C E
)&&E F
.&&F G
Ticks&&G L
;&&L M
private** 
long** 
m_lastWritten** "
;**" #
private.. 
bool.. 
m_completed..  
=..! "
false..# (
;..( )
private22 
LogEntry22 
m_lastEntry22 $
;22$ %
public77 
RepeatingLogScope77  
(77  !
)77! "
{88 	
m_scope99 
=99 
Log99 
.99 

StartScope99 $
(99$ %
this99% )
)99) *
;99* +
Task:: 
.:: 
Run:: 
(:: 
(:: 
):: 
=>:: 
RepeatedRunner:: )
(::) *
)::* +
)::+ ,
;::, -
};; 	
private@@ 
async@@ 
void@@ 
RepeatedRunner@@ )
(@@) *
)@@* +
{AA 	
varBB 
remainingTimeBB 
=BB 
m_maxIdleTimeBB  -
;BB- .
whileCC 
(CC 
!CC 
m_completedCC 
)CC  
{DD 
awaitEE 
TaskEE 
.EE 
DelayEE  
(EE  !
newEE! $
TimeSpanEE% -
(EE- .
MathEE. 2
.EE2 3
MaxEE3 6
(EE6 7
TimeSpanEE7 ?
.EE? @
FromMillisecondsEE@ P
(EEP Q
$numEEQ T
)EET U
.EEU V
TicksEEV [
,EE[ \
remainingTimeEE] j
)EEj k
)EEk l
)EEl m
.EEm n
ConfigureAwaitEEn |
(EE| }
false	EE} Ç
)
EEÇ É
;
EEÉ Ñ
ifFF 
(FF 
m_completedFF 
)FF  
returnGG 
;GG 
ifHH 
(HH 
m_lastEntryHH 
==HH  "
nullHH# '
)HH' (
continueII 
;II 
varKK 
nowKK 
=KK 
DateTimeKK "
.KK" #
NowKK# &
.KK& '
TicksKK' ,
;KK, -
remainingTimeLL 
=LL 
(LL  !
m_lastWrittenLL! .
+LL/ 0
m_maxIdleTimeLL1 >
)LL> ?
-LL@ A
nowLLB E
;LLE F
ifNN 
(NN 
remainingTimeNN !
<NN" #
$numNN$ %
)NN% &
{OO 
varPP 
lastPP 
=PP 
m_lastEntryPP *
;PP* +
varQQ 
recmsgQQ 
=QQ  
STILL_RUNNINGQQ! .
+QQ/ 0
m_lastEntryQQ1 <
.QQ< =
FormattedMessageQQ= M
;QQM N
LoggingSS 
.SS 
LogSS 
.SS  
WriteMessageSS  ,
(SS, -
m_lastEntryTT #
.TT# $
LevelTT$ )
,TT) *
m_lastEntryUU #
.UU# $
TagUU$ '
,UU' (
m_lastEntryVV #
.VV# $
IdVV$ &
,VV& '
m_lastEntryWW #
.WW# $
	ExceptionWW$ -
,WW- .
recmsgXX 
,XX 
nullYY 
)ZZ 
;ZZ 
if^^ 
(^^ 
object^^ 
.^^ 
ReferenceEquals^^ .
(^^. /
m_lastEntry^^/ :
.^^: ;
Message^^; B
,^^B C
recmsg^^D J
)^^J K
)^^K L
m_lastEntry__ #
=__$ %
last__& *
;__* +
remainingTimeaa !
=aa" #
m_maxIdleTimeaa$ 1
;aa1 2
}bb 
}cc 
}dd 	
publicoo 
voidoo	 
Disposeoo 
(oo 
)oo 
{pp 	
m_completedqq 
=qq 
trueqq 
;qq 
m_scoperr 
.rr 
Disposerr 
(rr 
)rr 
;rr 
}ss 	
publicyy 
voidyy 
WriteMessageyy  
(yy  !
LogEntryyy! )
entryyy* /
)yy/ 0
{zz 	
m_lastWritten{{ 
={{ 
DateTime{{ $
.{{$ %
Now{{% (
.{{( )
Ticks{{) .
;{{. /
m_lastEntry|| 
=|| 
entry|| 
;||  
}}} 	
}~~ 
} 